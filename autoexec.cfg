// Load the Thyme configuration file.
Reflection.ExecuteFile("thyme.cfg");

// Bind the "pause" key to take one time step when paused.
Keys.bind("pause", { App.Step });

// Exit and quit functions.
exit = { System.exit };
quit = { System.exit };

// Print function.
print = { Console.print };

// Simulation time and basic math functions.
time = { Sim.time };
sin = { math.sin };
cos = { math.cos };

// Function to spawn a row of boxes.
spawnBoxRow = (offset, n) => {
    for (n, (x) => {
        Scene.addBox({ pos = offset + [x, 0] });
    });
};

// Function to spawn a pyramid of boxes.
spawnPyramid = (n) => {
    for (n, (i) => {
        spawnBoxRow([(n - i) * 0.5, n - i], i);
    });
};

// Function to create a ring of points.
makeRing = (r, n) => {
    list = [];
    for (n, (i) => {
        a = (2 * math.pi * i) / n;
        list = list ++ [r * [cos(a), sin(a)]];
    });
    list;
};

// Function to spawn a ring (2D-torus).
spawnRing = {
    Scene.addPolygon({ surfaces = [makeRing(1, 48), makeRing(0.5, 48)] });
};

// Groovy mode on.
groovyOn = {
    App.fadeColor = [0.8, 0, 0.9];
    App.fadeTranslate = { [3 * sin(time), 2 * sin(time)] };
    App.fadeRotate = { sin(System.time * 1.2) };
    App.Background.skyColor = [0, 0, 0, 0];
};

// Groovy mode off.
groovyOff = {
    App.fadeColor = [0, 0, 0];
    App.Background.skyColor = [0.3, 0.4, 1, 1];
};